using FaucetCollector.Script;
using System;
public class FreeDogeonScript : FaucetScript
{
public override int DoLogin()
{
    OpenQA.Selenium.IWebElement signInEmail = ElementById("login_form_doge_address");
    if (signInEmail == null)
    {
        return Fail("Signin email input not found.");
        
    }
    OpenQA.Selenium.IWebElement signInPassword = ElementById("login_form_password");
    if (signInPassword == null)
    {
        return Fail("Signin password input not found.");
        }
    SetText(signInEmail, GetSetting("Email"));
    SetText(signInPassword, GetPassword("Password"));
    var button = ElementById("login_button");
    if (!IsVisible(button))
    {
       return Fail("Login button not found");
       
    }

    Click(button);
    return base.DoLogin();
}

public override void Start()
{
    Title = "FreeDogeon.com|Free dogecoin";

    SuccessXPath = "//*[@id='free_play_result']";
    FailXPath = "//*[@id='free_play_error']";
    base.Start();
}
 

public override FaucetSettings Settings
{
    get
    {
        return new FaucetSettings("https://freedogeon.com/")
        {
            new FaucetSetting() {Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true},

            new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true }
        };
    }
}
 public override int DoSolveFaucet()
    {
        //Find the submit button to claim on the faucet
        OpenQA.Selenium.IWebElement submitButton = ElementByXPath("//*[@id='free_play_tab']/div[4]/div/p/button");
        OpenQA.Selenium.IWebElement captcha = ElementByXPath("//div[@id='free_play_tab']//iframe[contains(@src, 'recaptcha/api2')]");
        if (!IsVisible(submitButton))
        {
            //Unable to find the submit button - return the failure.
            return Fail("Submit button not found or not visible.");
        }
    if (IsVisible(captcha))
    {


    int result = SolveCaptcha();
    if (result > 0)
        {
            //Unable to solve the captcha - return the failure
        return result;
        }
    }
    Click(submitButton);
    return base.DoSolveFaucet();
}
 public override int GetFaucetWaitTime()
    {
        OpenQA.Selenium.IWebElement timerCheck = ElementById("time_remaining");
        if (!IsVisible(timerCheck))
        {
            //no time remaining element, so we are good to go.
            return 0;
        }

        string minutes = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[0].innerText"));
        string seconds = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[1].innerText"));
        if (string.IsNullOrEmpty(seconds) || string.IsNullOrEmpty(minutes))
        {
            return 0;
        }
if (!int.TryParse(minutes.Trim(), out minutes))
{
  //unable to parse.
  return GetWaitSetting();
}
if (!int.TryParse(seconds.Trim(), out seconds))
{
  //unable to parse.
  return GetWaitSetting();();
}

        //Driver.Close();  // Close specific chrome window
        //Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        //Driver.Dispose();  // Close the chromedriver.exe

        //we need to return the total number of seconds
        return (minutes * 60) + seconds;
    }
    public override bool IsLoggedIn()
    {
        //If there is a visible element time_remaining or free_play_form_button then we are logged in.     
        return IsVisible(ElementById("free_play_tab")) || IsVisible(ElementById("time_remaining"));
    }
}
